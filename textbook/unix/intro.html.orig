
<!DOCTYPE html>

<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>1. Operating Systems and UNIX &#8212; UndertheCovers</title>
    
  <!-- Loaded before other Sphinx assets -->
  <link href="../_static/styles/theme.css?digest=1999514e3f237ded88cf" rel="stylesheet">
<link href="../_static/styles/pydata-sphinx-theme.css?digest=1999514e3f237ded88cf" rel="stylesheet">

    
  <link rel="stylesheet"
    href="../_static/vendor/fontawesome/5.13.0/css/all.min.css">
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="../_static/vendor/fontawesome/5.13.0/webfonts/fa-solid-900.woff2">
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="../_static/vendor/fontawesome/5.13.0/webfonts/fa-brands-400.woff2">

    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" href="../_static/styles/sphinx-book-theme.css?digest=5115cc725059bd94278eecd172e13a965bf8f5a9" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/togglebutton.css" />
    <link rel="stylesheet" type="text/css" href="../_static/copybutton.css" />
    <link rel="stylesheet" type="text/css" href="../_static/mystnb.css" />
    <link rel="stylesheet" type="text/css" href="../_static/sphinx-thebe.css" />
    <link rel="stylesheet" type="text/css" href="../_static/design-style.b7bb847fb20b106c3d81b95245e65545.min.css" />
    
  <!-- Pre-loaded scripts that we'll load fully later -->
  <link rel="preload" as="script" href="../_static/scripts/pydata-sphinx-theme.js?digest=1999514e3f237ded88cf">

    <script data-url_root="../" id="documentation_options" src="../_static/documentation_options.js"></script>
    <script src="../_static/jquery.js"></script>
    <script src="../_static/underscore.js"></script>
    <script src="../_static/doctools.js"></script>
    <script src="../_static/clipboard.min.js"></script>
    <script src="../_static/copybutton.js"></script>
    <script src="../_static/scripts/sphinx-book-theme.js?digest=9c920249402e914e316237a7dbc6769907cce411"></script>
    <script>let toggleHintShow = 'Click to show';</script>
    <script>let toggleHintHide = 'Click to hide';</script>
    <script>let toggleOpenOnPrint = 'true';</script>
    <script src="../_static/togglebutton.js"></script>
    <script async="async" kind="hypothesis" src="https://hypothes.is/embed.js"></script>
    <script>var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';</script>
    <script src="../_static/design-tabs.js"></script>
    <script>const THEBE_JS_URL = "https://unpkg.com/thebe@0.8.2/lib/index.js"
const thebe_selector = ".thebe,.cell"
const thebe_selector_input = "pre"
const thebe_selector_output = ".output, .cell_output"
</script>
    <script async="async" src="../_static/sphinx-thebe.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js"></script>
    <script src="https://unpkg.com/@jupyter-widgets/html-manager@^0.20.1/dist/embed-amd.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="2. What is a Terminal and why do we still use them?" href="terminal.html" />
    <link rel="prev" title="How to read this book" href="../howto.html" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="docsearch:language" content="None">
    

    <!-- Google Analytics -->
    
  </head>
  <body data-spy="scroll" data-target="#bd-toc-nav" data-offset="60">
<!-- Checkboxes to toggle the left sidebar -->
<input type="checkbox" class="sidebar-toggle" name="__navigation" id="__navigation" aria-label="Toggle navigation sidebar">
<label class="overlay overlay-navbar" for="__navigation">
    <div class="visually-hidden">Toggle navigation sidebar</div>
</label>
<!-- Checkboxes to toggle the in-page toc -->
<input type="checkbox" class="sidebar-toggle" name="__page-toc" id="__page-toc" aria-label="Toggle in-page Table of Contents">
<label class="overlay overlay-pagetoc" for="__page-toc">
    <div class="visually-hidden">Toggle in-page Table of Contents</div>
</label>
<!-- Headers at the top -->
<div class="announcement header-item noprint"></div>
<div class="header header-item noprint"></div>

    
    <div class="container-fluid" id="banner"></div>

    

    <div class="container-xl">
      <div class="row">
          
<!-- Sidebar -->
<div class="bd-sidebar noprint" id="site-navigation">
    <div class="bd-sidebar__content">
        <div class="bd-sidebar__top"><div class="navbar-brand-box">
    <a class="navbar-brand text-wrap" href="../index.html">
      
        <!-- `logo` is deprecated in Sphinx 4.0, so remove this when we stop supporting 3 -->
        
      
      
      <img src="../_static/logo.jpg" class="logo" alt="logo">
      
      
      <h1 class="site-logo" id="site-title">UndertheCovers</h1>
      
    </a>
</div><form class="bd-search d-flex align-items-center" action="../search.html" method="get">
  <i class="icon fas fa-search"></i>
  <input type="search" class="form-control" name="q" id="search-input" placeholder="Search this book..." aria-label="Search this book..." autocomplete="off" >
</form><nav class="bd-links" id="bd-docs-nav" aria-label="Main">
    <div class="bd-toc-item active">
        
        <ul class="nav bd-sidenav bd-sidenav__home-link">
            <li class="toctree-l1">
                <a class="reference internal" href="../intro_tb.html">
                    Under the Covers : The Secret Life of Software
                </a>
            </li>
        </ul>
        <p aria-level="2" class="caption" role="heading">
 <span class="caption-text">
  How to read this book
 </span>
</p>
<ul class="nav bd-sidenav">
 <li class="toctree-l1">
  <a class="reference internal" href="../howto.html">
   How to read this book
  </a>
 </li>
</ul>
<p aria-level="2" class="caption" role="heading">
 <span class="caption-text">
  The Unix Development Environment
 </span>
</p>
<ul class="current nav bd-sidenav">
 <li class="toctree-l1 current active">
  <a class="current reference internal" href="#">
   1. Operating Systems and UNIX
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="terminal.html">
   2. What is a Terminal and why do we still use them?
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="files.html">
   3. Organizing and Managing Information as a Tree of Files and Directories
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="shellintro.html">
   4. The Shell - Part I: Having an ASCII conversation with the OS
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="shelldetails.html">
   5. The Shell - Part II: Some UNIX details
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="editors.html">
   6. Editors
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="processes.html">
   7. Processes
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="ides.html">
   8. IDEs
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="make.html">
   9. Make
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="gitintro.html">
   10. Intro to Git
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="git.html">
   11. Git
  </a>
 </li>
</ul>
<p aria-level="2" class="caption" role="heading">
 <span class="caption-text">
  The Belly of the Beast: The von Neumann Architecture and Assembly Programming
 </span>
</p>
<ul class="nav bd-sidenav">
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/intro.html">
   12. Introduction: Assembly Programming
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/vonNeumannArchitecture.html">
   13. The von Neumann Architecture
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/UnixAssemblyProgramming.html">
   14. Executables and Processes
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/Debuggers.html">
   15. Machine Debuggers &amp; Open Process Surgery
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/assembly.html">
   16. Lets write some assembly code
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/InfoRepI.html">
   17. Representing information - Preliminaries: Bits, Bytes and Notation
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/nativetypes.html">
   18. Information Representation - Native Types
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/anatomyI.html">
   19. Assembly : Program Anatomy I
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/anatomyII.html">
   20. Program Anatomy II : Functions
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/anatomyIII.html">
   21. Program Anatomy III : Code as Data
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/anatomyIV.html">
   22. Program Anatomy IV: The Tree of Bytes and Data Structures
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/assemblyOS.html">
   23. Assembly using the OS
  </a>
 </li>
</ul>
<p aria-level="2" class="caption" role="heading">
 <span class="caption-text">
  Into the Light : C Programming
 </span>
</p>
<ul class="nav bd-sidenav">
 <li class="toctree-l1">
  <a class="reference internal" href="../C/intro.html">
   24. Introduction
  </a>
 </li>
</ul>
<p aria-level="2" class="caption" role="heading">
 <span class="caption-text">
  Course Specific Material
 </span>
</p>
<ul class="nav bd-sidenav">
 <li class="toctree-l1">
  <a class="reference internal" href="../BUCS210_intro.html">
   BU CS210 Overview
  </a>
 </li>
</ul>

    </div>
</nav></div>
        <div class="bd-sidebar__bottom">
             <!-- To handle the deprecated key -->
            
            <div class="navbar_extra_footer">
            Powered by <a href="https://jupyterbook.org">Jupyter Book</a>
            </div>
            
        </div>
    </div>
    <div id="rtd-footer-container"></div>
</div>


          


          
<!-- A tiny helper pixel to detect if we've scrolled -->
<div class="sbt-scroll-pixel-helper"></div>
<!-- Main content -->
<div class="col py-0 content-container">
    
    <div class="header-article row sticky-top noprint">
        



<div class="col py-1 d-flex header-article-main">
    <div class="header-article__left">
        
        <label for="__navigation"
  class="headerbtn"
  data-toggle="tooltip"
data-placement="right"
title="Toggle navigation"
>
  

<span class="headerbtn__icon-container">
  <i class="fas fa-bars"></i>
  </span>

</label>

        
    </div>
    <div class="header-article__right">
<div class="menu-dropdown menu-dropdown-launch-buttons">
  <button class="headerbtn menu-dropdown__trigger"
      aria-label="Launch interactive content">
      <i class="fas fa-rocket"></i>
  </button>
  <div class="menu-dropdown__content">
    <ul>
    </ul>
  </div>
</div>

<button onclick="toggleFullScreen()"
  class="headerbtn"
  data-toggle="tooltip"
data-placement="bottom"
title="Fullscreen mode"
>
  

<span class="headerbtn__icon-container">
  <i class="fas fa-expand"></i>
  </span>

</button>

<div class="menu-dropdown menu-dropdown-repository-buttons">
  <button class="headerbtn menu-dropdown__trigger"
      aria-label="Source repositories">
      <i class="fab fa-github"></i>
  </button>
  <div class="menu-dropdown__content">
    <ul>
      <li>
        <a href="https://github.com/jappavoo/UndertheCovers"
   class="headerbtn"
   data-toggle="tooltip"
data-placement="left"
title="Source repository"
>
  

<span class="headerbtn__icon-container">
  <i class="fab fa-github"></i>
  </span>
<span class="headerbtn__text-container">repository</span>
</a>

      </li>
      
      <li>
        <a href="https://github.com/jappavoo/UndertheCovers/issues/new?title=Issue%20on%20page%20%2Funix/intro.html&body=Your%20issue%20content%20here."
   class="headerbtn"
   data-toggle="tooltip"
data-placement="left"
title="Open an issue"
>
  

<span class="headerbtn__icon-container">
  <i class="fas fa-lightbulb"></i>
  </span>
<span class="headerbtn__text-container">open issue</span>
</a>

      </li>
      
      <li>
        <a href="https://github.com/jappavoo/UndertheCovers/edit/main/underthecovers/unix/intro.ipynb"
   class="headerbtn"
   data-toggle="tooltip"
data-placement="left"
title="Edit this page"
>
  

<span class="headerbtn__icon-container">
  <i class="fas fa-pencil-alt"></i>
  </span>
<span class="headerbtn__text-container">suggest edit</span>
</a>

      </li>
      
    </ul>
  </div>
</div>

<div class="menu-dropdown menu-dropdown-download-buttons">
  <button class="headerbtn menu-dropdown__trigger"
      aria-label="Download this page">
      <i class="fas fa-download"></i>
  </button>
  <div class="menu-dropdown__content">
    <ul>
      <li>
        <a href="../_sources/unix/intro.ipynb"
   class="headerbtn"
   data-toggle="tooltip"
data-placement="left"
title="Download source file"
>
  

<span class="headerbtn__icon-container">
  <i class="fas fa-file"></i>
  </span>
<span class="headerbtn__text-container">.ipynb</span>
</a>

      </li>
      
      <li>
        
<button onclick="printPdf(this)"
  class="headerbtn"
  data-toggle="tooltip"
data-placement="left"
title="Print to PDF"
>
  

<span class="headerbtn__icon-container">
  <i class="fas fa-file-pdf"></i>
  </span>
<span class="headerbtn__text-container">.pdf</span>
</button>

      </li>
      
    </ul>
  </div>
</div>
<label for="__page-toc"
  class="headerbtn headerbtn-page-toc"
  
>
  

<span class="headerbtn__icon-container">
  <i class="fas fa-list"></i>
  </span>

</label>

    </div>
</div>

<!-- Table of contents -->
<div class="col-md-3 bd-toc show noprint">
    <div class="tocsection onthispage pt-5 pb-3">
        <i class="fas fa-list"></i> Contents
    </div>
    <nav id="bd-toc-nav" aria-label="Page">
        <ul class="visible nav section-nav flex-column">
 <li class="toc-h2 nav-item toc-entry">
  <a class="reference internal nav-link" href="#computer">
   1.1. Computer
  </a>
  <ul class="nav section-nav flex-column">
   <li class="toc-h3 nav-item toc-entry">
    <a class="reference internal nav-link" href="#programmer-vs-user">
     1.1.1. Programmer vs User
    </a>
   </li>
  </ul>
 </li>
 <li class="toc-h2 nav-item toc-entry">
  <a class="reference internal nav-link" href="#useful">
   1.2. Useful
  </a>
 </li>
 <li class="toc-h2 nav-item toc-entry">
  <a class="reference internal nav-link" href="#unix">
   1.3. UNIX
  </a>
  <ul class="nav section-nav flex-column">
   <li class="toc-h3 nav-item toc-entry">
    <a class="reference internal nav-link" href="#an-operating-system-built-by-programmers-for-programmers">
     1.3.1. An operating System Built by Programmers for Programmers
    </a>
   </li>
   <li class="toc-h3 nav-item toc-entry">
    <a class="reference internal nav-link" href="#the-kernel">
     1.3.2. The Kernel
    </a>
   </li>
   <li class="toc-h3 nav-item toc-entry">
    <a class="reference internal nav-link" href="#user-programs">
     1.3.3. User Programs
    </a>
   </li>
   <li class="toc-h3 nav-item toc-entry">
    <a class="reference internal nav-link" href="#visualizing-a-unix-system">
     1.3.4. Visualizing a Unix system
    </a>
    <ul class="nav section-nav flex-column">
     <li class="toc-h4 nav-item toc-entry">
      <a class="reference internal nav-link" href="#processes-and-executables">
       1.3.4.1. Processes and Executables
      </a>
     </li>
    </ul>
   </li>
   <li class="toc-h3 nav-item toc-entry">
    <a class="reference internal nav-link" href="#benefits-to-studying-unix">
     1.3.5. Benefits to studying UNIX
    </a>
   </li>
  </ul>
 </li>
 <li class="toc-h2 nav-item toc-entry">
  <a class="reference internal nav-link" href="#bottomline">
   1.4. Bottomline
  </a>
 </li>
</ul>

    </nav>
</div>
    </div>
    <div class="article row">
        <div class="col pl-md-3 pl-lg-5 content-container">
            <!-- Table of contents that is only displayed when printing the page -->
            <div id="jb-print-docs-body" class="onlyprint">
                <h1>Operating Systems and UNIX</h1>
                <!-- Table of contents -->
                <div id="print-main-content">
                    <div id="jb-print-toc">
                        
                        <div>
                            <h2> Contents </h2>
                        </div>
                        <nav aria-label="Page">
                            <ul class="visible nav section-nav flex-column">
 <li class="toc-h2 nav-item toc-entry">
  <a class="reference internal nav-link" href="#computer">
   1.1. Computer
  </a>
  <ul class="nav section-nav flex-column">
   <li class="toc-h3 nav-item toc-entry">
    <a class="reference internal nav-link" href="#programmer-vs-user">
     1.1.1. Programmer vs User
    </a>
   </li>
  </ul>
 </li>
 <li class="toc-h2 nav-item toc-entry">
  <a class="reference internal nav-link" href="#useful">
   1.2. Useful
  </a>
 </li>
 <li class="toc-h2 nav-item toc-entry">
  <a class="reference internal nav-link" href="#unix">
   1.3. UNIX
  </a>
  <ul class="nav section-nav flex-column">
   <li class="toc-h3 nav-item toc-entry">
    <a class="reference internal nav-link" href="#an-operating-system-built-by-programmers-for-programmers">
     1.3.1. An operating System Built by Programmers for Programmers
    </a>
   </li>
   <li class="toc-h3 nav-item toc-entry">
    <a class="reference internal nav-link" href="#the-kernel">
     1.3.2. The Kernel
    </a>
   </li>
   <li class="toc-h3 nav-item toc-entry">
    <a class="reference internal nav-link" href="#user-programs">
     1.3.3. User Programs
    </a>
   </li>
   <li class="toc-h3 nav-item toc-entry">
    <a class="reference internal nav-link" href="#visualizing-a-unix-system">
     1.3.4. Visualizing a Unix system
    </a>
    <ul class="nav section-nav flex-column">
     <li class="toc-h4 nav-item toc-entry">
      <a class="reference internal nav-link" href="#processes-and-executables">
       1.3.4.1. Processes and Executables
      </a>
     </li>
    </ul>
   </li>
   <li class="toc-h3 nav-item toc-entry">
    <a class="reference internal nav-link" href="#benefits-to-studying-unix">
     1.3.5. Benefits to studying UNIX
    </a>
   </li>
  </ul>
 </li>
 <li class="toc-h2 nav-item toc-entry">
  <a class="reference internal nav-link" href="#bottomline">
   1.4. Bottomline
  </a>
 </li>
</ul>

                        </nav>
                    </div>
                </div>
            </div>
            <main id="main-content" role="main">
                
              <div>
                
  <section class="tex2jax_ignore mathjax_ignore" id="operating-systems-and-unix">
<h1><span class="section-number">1. </span>Operating Systems and UNIX<a class="headerlink" href="#operating-systems-and-unix" title="Permalink to this headline">#</a></h1>
<p>We call the collection of software that we use to make a “computer”  “useful” an operating system.  But what exactly does this mean?</p>
<section id="computer">
<h2><span class="section-number">1.1. </span>Computer<a class="headerlink" href="#computer" title="Permalink to this headline">#</a></h2>
<p>Today a computer can take many forms from desktop Personal Computers (PCs), laptops, mobile phones, tablets, building scale super-computers, etc.  In some sense the defining property we care about is that the device supports a classic model for programming it – we call this model the von Neumann architecture.  We will discuss this model in much more detail when we start considering exactly how software and hardware work with respect to <a class="reference internal" href="../assembly/intro.html"><span class="doc std std-doc">assembly language</span></a>.   Below illustrates how we will visually represent a generic von Neumann based computer and summarizes what we need to know for now.</p>
<div class="cell tag_remove-input docutils container">
<div class="cell_output docutils container">
<!-- produced by: 
htmlFig("[{'src': '../images/SLS_TheMachine.png'}]", 
        id="fig:vnm", 
        align="left", 
        width="100%",
        margin="auto 3em 0 auto",
        caption="Figure: Our illustration of a von Neumann computer", 
        captionalign="left")
-->
<table id="fig:vnm" align="left" width="100%" cellpadding="0" cellspacing="0" border="0" style="border-collapse: collapse; margin: auto 3em 0 auto">
    <tr style="padding: 0; margin: 0;"> 
        <td colspan="1" width="100%" style="padding: 0; margin: 0 0 0 0; background-color:inherit;">
            <div style="padding: 0; margin: 0 0 0 0;">
              <figure style="padding: 0; margin: 0 0 0 0; width:100%;">
                   <img src="../images/SLS_TheMachine.png" width="100%" style="padding: 0; margin: 0;">
                </figure>
            </div>
        </td>
    </tr>
    <caption align="bottom" style="text-align: left; padding: 0; margin: 0;" >
          <i>Figure: Our illustration of a von Neumann computer</i> 
    </caption>
</table>
</div>
</div>
<p><strong>Central Processing Unit (CPU):</strong></p>
<ul class="simple">
<li><p>the smart bits that “execute” the instructions of software, also called the processor.</p></li>
</ul>
<p><strong>Memory</strong></p>
<ul class="simple">
<li><p>the devices that hold the instructions and data that make up the running software</p></li>
<li><p>physically connected to the CPU via direct wiring – often referred to as RAM, main memory, etc</p></li>
<li><p>fast, power hungry and volatile (values are lost when electricity is lost)</p></li>
</ul>
<p><strong>I/O devices</strong> – for the moment we only consider two categories</p>
<ul class="simple">
<li><p>Storage devices:</p>
<ul>
<li><p>hard drives, ssd’s, flash memory, flash drives/usb sticks, etc</p></li>
<li><p>slow and large compared to main memory</p></li>
<li><p>requires much more complicated programming to access its data compared to Memory</p></li>
<li><p>non-volatile (keep their values even when they don’t have electricity)</p></li>
</ul>
</li>
<li><p>Communication devices:</p>
<ul>
<li><p>allow connections to the outside world</p></li>
<li><p>networks, terminals, usb devices – keyboards, mice, etc.</p></li>
</ul>
</li>
</ul>
<p>For the moment it suffices to say that programming a computer means being able to apply your knowledge of a programming language and existing software to have the computer do something you want it to.  For example, edit photos, play music, maintain a list of grocery items, calculate PI, send email, browse the web, test if a molecule might have promise as a new vaccine, automatically adjust the temperature of your home, control a car, etc.</p>
<section id="programmer-vs-user">
<h3><span class="section-number">1.1.1. </span>Programmer vs User<a class="headerlink" href="#programmer-vs-user" title="Permalink to this headline">#</a></h3>
<p>To be honest many people simply care that the computer can run existing programs – we will call these folks “Users”. However, “Programmers” are a special type of user.  Programmers use Operating Systems, and other software tools to create new programs themselves.  As a matter of fact some programmers simply focus on developing programs that make writing programs easier – like the folks that develop the operating system software, programming languages, editors, etc.</p>
</section>
</section>
<section id="useful">
<h2><span class="section-number">1.2. </span>Useful<a class="headerlink" href="#useful" title="Permalink to this headline">#</a></h2>
<p>So from our perspective, the main aspects of the operating system, that we care about, is that it makes it ease for programmers to create new programs.  In addition we would like an operating system that does not hide things from us so that we can explore how programs (and computers) work.</p>
<p>Operating Systems are designed and created with specific uses and hardware in mind.  Some are designed for special purpose computers and the programs that are expected to run on them like computers built into an airplane to control its various parts or a super-computer which is expected to run complex and large scientific simulation programs.  While other operating systems are designed primarily to enable users to install and run commercial grade programs on their personal devices.  These operating systems while they do enable programmers to write new programs, they are designed to hide most of these aspects from their “normal” target user.  Those users mainly just wants to use programs written by others.  The interface of these operating systems tend to focus on graphics and visually oriented ways of interacting with programs.</p>
</section>
<section id="unix">
<h2><span class="section-number">1.3. </span>UNIX<a class="headerlink" href="#unix" title="Permalink to this headline">#</a></h2>
<img align="right" src="../images/Unix.gif" width="25%" style="margin: auto auto auto auto"> 
UNIX on the other hand assumes that its users are primarily programmers.  Its design and collection of tools are not meant to be particularly user friendly.   Rather UNIX is designed to allow programmers to be very productive and to support a broad range of programming tools.  Many of the concepts and mechanisms of UNIX underly, are in, other operating systems but have been hidden or obscured to make things easier for their non-programmer users.  
<section id="an-operating-system-built-by-programmers-for-programmers">
<h3><span class="section-number">1.3.1. </span>An operating System Built by Programmers for Programmers<a class="headerlink" href="#an-operating-system-built-by-programmers-for-programmers" title="Permalink to this headline">#</a></h3>
<p>The <a class="reference external" href="https://www.opengroup.org/membership/forums/platform/unix">UNIX</a> operating system was built by master programmers who valued programmability and productivity.  In some sense learning to work on the UNIX systems is a right of passage that not only teaches you how to be productive on a computer running the UNIX operating system but teaches you to think and act like a programmer.</p>
<p>Given its programming focus UNIX is organized around two categories of software – kernel and user.  The kernel is a component of the UNIX that users of UNIX do not directly interact with.  It is the core software that is used to manage the various devices of the computer and construct an environment that allows programmers to create new users programs.  The idea is that very little is really built into UNIX rather its users are encouraged to write lots of small programs that build on the functionality of the kernel to do useful things.  The kernel’s main job is to provide the ability to run new program, provide those programs with access to the hardware, and provide common ways for programs to interconnect, work together.</p>
<p>I know this all sounds a bit recursive – welcome to computer science.  As we start interacting with UNIX it will make more sense.</p>
<blockquote>
<div><p><a class="reference internal" href="../_images/history.png"><img alt="../_images/history.png" class="align-left" src="../_images/history.png" style="width: 60px;" /></a> <p style="background-color:powderblue;"> Unix recently celebrated its 50th year Anniversary. <br>
<a class="reference external" href="https://www.bell-labs.com/about/history/innovation-stories/50-years-unix/#gref">50 Years of Unix</a> <br>
The people and its history are a fascinating journey into how we have gotten to where we are today. <br>
<a class="reference external" href="https://spectrum.ieee.org/the-strange-birth-and-long-life-of-unix#toggle-gdpr">The Strange birth and long life of Unix</a> <br>
UNIX and it’s children literally make our digital world go around and will likely continue to do so for the quite some time.</p>
</div></blockquote>
</p>
<p><a id='UnixKernel_sec'></a></p>
</section>
<section id="the-kernel">
<h3><span class="section-number">1.3.2. </span>The Kernel<a class="headerlink" href="#the-kernel" title="Permalink to this headline">#</a></h3>
<p>The Kernel is the bottom layer of software that has direct access to all the hardware.  There is a single instance of the kernel that bootstraps the hardware.  It provides a means for starting application programs (often also called user programs).  The kernel performs and provides several important abilities.</p>
<ol class="simple">
<li><p>The kernel enables several user programs to run at the same time.</p></li>
<li><p>The kernel keeps each running user program isolated from each other – such that each program can behave as if it is the only program running.</p></li>
<li><p>The kernel provides facilities for managing the running programs, eg. listing, pausing, terminating, etc.</p></li>
<li><p>While user programs can be started and can end the kernel is always present and running.  If it ends it means the your computer has crashed!</p></li>
<li><p>The kernel provides a collection of ever present functions and objects that programs/programmers can rely on:</p>
<ul class="simple">
<li><p>it provides core “software” “abstractions” packaged in the form of a library of kernel functions</p>
<ul>
<li><p>these functions make it easier for programs to use the hardware</p></li>
<li><p>the kernel ensures that these functions,  behaves consistently across different hardware</p></li>
</ul>
</li>
<li><p>these functions hides the details and complexity of the hardware devices from the programs and thus the programmers who wrote them.  For example a Unix kernel provides programs with the generic abstraction of a <a class="reference internal" href="files.html"><span class="doc std std-doc">“file”</span></a> that allows programs to create, store and recall data on storage devices without ever needing to know any details of the devices themselves.</p></li>
</ul>
</li>
</ol>
<p><a class="reference internal" href="../_images/warning.svg"><img alt="../_images/warning.svg" class="align-left" src="../_images/warning.svg" width="60" /></a> A critical point of the Unix design: <strong>Humans do not and cannot directly interact with the kernel, only User Programs can interact with the kernel by invoking kernel functions</strong>.  This design promotes and encourages that the rest of the operating systems and for that matter all other software be viewed as separated from the kernel.  As such it encourages a building block approach where several alternatives for any given OS feature, like human interface programs, can be added, supported and explored while the kernel remains without change.  The goal is to empower programmers to grow and extend the system in a natural and seamless way.</p>
<p>It is worth noting most modern operating systems have adopted this basic organization where there is a base kernel component and a large collection of pre-packaged user programs.</p>
<p><a id='UnixUser_sec'></a></p>
</section>
<section id="user-programs">
<h3><span class="section-number">1.3.3. </span>User Programs<a class="headerlink" href="#user-programs" title="Permalink to this headline">#</a></h3>
<p>Largely what most people think of when they think of an OS is the large body of pre-packaged user programs that can be installed with the kernel of the OS.   Typically there are at least three categories of user programs, including:</p>
<ol class="simple">
<li><p>Display Servers:  These are collections of programs designed to operate specific devices for human interaction such as graphical screens, keyboards, mice, touch pads, touch screens, etc.  The first layer of this software (after the kernel) is typically some form of <a class="reference external" href="https://en.wikipedia.org/wiki/Windowing_system#Display_server">Windowing System</a>.  Examples include Microsoft’s <a class="reference external" href="https://en.wikipedia.org/wiki/Desktop_Window_Manager">Desktop Window Manager</a>, Apple’s <a class="reference external" href="https://en.wikipedia.org/wiki/Quartz_Compositor">Quartz Compositor</a> and the <a class="reference external" href="https://en.wikipedia.org/wiki/X_Window_System">X Window System</a> traditionally used by Unix operating systems. Today we are also seeing the rise of using web-browsers to present a graphical interface system this includes <a class="reference external" href="https://en.wikipedia.org/wiki/Project_Jupyter#JupyterLab">Jupyter Lab</a> which we make use of.   However, as in the case of Unix, older systems they typically retain support for their rich older <a class="reference internal" href="terminal.html"><span class="doc std std-doc">ASCII terminal devices</span></a> in the form of command line shell programs (<a class="reference internal" href="shellintro.html"><span class="doc std std-doc">Shell</span></a>).</p></li>
<li><p><a class="reference external" href="https://en.wikipedia.org/wiki/File_manager">File Managers</a>:  Programs that work with a Display Server and provide a human the ability to explore and find information about the other programs and data installed.  Examples include Apple’s <a class="reference external" href="https://en.wikipedia.org/wiki/Finder_(software)">Finder</a> and Microsoft’s <a class="reference external" href="https://en.wikipedia.org/wiki/File_Manager_(Windows)">File Manager</a>.</p></li>
<li><p>Other: There is a highly variable collection of software that form the rest of the user programs.  This body largely depending on the OS and its intended target audience.   In the case of OS’s that are geared to personal computers this set of software includes:  media programs, web-browsers, productivity applications and more.  While not always standard, the tools for developing new programs also fall in this category.   These include program editors, programming languages and debuggers.  A hallmark of Unix is the rich body of programming tools associated with it (including the tools to rebuild the kernel itself).</p></li>
</ol>
<p>One of the distinguishing feature of Unix is its standard user command line programs that are geared to programmers (<a class="reference external" href="https://en.wikipedia.org/wiki/List_of_Unix_commands">https://en.wikipedia.org/wiki/List_of_Unix_commands</a>).  While they lack graphical interfaces and are <a class="reference external" href="../unix/terminal.ipynb#ASCII_sec">ASCII</a>/command line oriented they form a very rich and powerful set of building blocks that allow a knowledgeable programmer to rapidly create turnkey solutions including the; text searching and transformation, data wrangling, automation, as well as the development and debugging of large applications.</p>
<p><a id='UnixViz_sec'></a></p>
</section>
<section id="visualizing-a-unix-system">
<h3><span class="section-number">1.3.4. </span>Visualizing a Unix system<a class="headerlink" href="#visualizing-a-unix-system" title="Permalink to this headline">#</a></h3>
<div class="cell tag_remove-input docutils container">
<div class="cell_output docutils container">
<!-- produced by: 
htmlFig("[{'src': '../images/UnixRunning.png'}]", 
        id="fig:runningunix", 
        align="right", 
        width="50%",
        margin="auto auto auto 1.5em",
        caption="Figure: Running Unix system.", 
        captionalign="left")
-->
<table id="fig:runningunix" align="right" width="50%" cellpadding="0" cellspacing="0" border="0" style="border-collapse: collapse; margin: auto auto auto 1.5em">
    <tr style="padding: 0; margin: 0;"> 
        <td colspan="1" width="100%" style="padding: 0; margin: 0 0 0 0; background-color:inherit;">
            <div style="padding: 0; margin: 0 0 0 0;">
              <figure style="padding: 0; margin: 0 0 0 0; width:100%;">
                   <img src="../images/UnixRunning.png" width="100%" style="padding: 0; margin: 0;">
                </figure>
            </div>
        </td>
    </tr>
    <caption align="bottom" style="text-align: left; padding: 0; margin: 0;" >
          <i>Figure: Running Unix system.</i> 
    </caption>
</table>
<p>We visualized a running Unix system with the Hardware of the computer at the bottom, shaded
blue, and the running software, shaded in green, above it.  The Unix Kernel is a persistent
program that forms the foundation for launching and running instances of user programs and
is illustrated as the green oval labeled &quot;UNIX Kernel&quot;.  The smaller green circles represent
the currently running programs that have been started. Each time a program is started we
visualize a new circle representing a new running instances of the program.   In the diagram
each is labeled with the program that was used to start it. Each instance is independent and
has its own &quot;life-time&quot;.   If a specific running instance of a program ends, crashes or is
terminated (killed) by the user we would remove its circle.  So while in reality we can't
physically see the programs running we none the less think of the running software as forming
a world of its own, inside the machine, with the kernel enabling its construction and management.</p>
</div>
</div>
<section id="processes-and-executables">
<h4><span class="section-number">1.3.4.1. </span>Processes and Executables<a class="headerlink" href="#processes-and-executables" title="Permalink to this headline">#</a></h4>
<p>In UNIX a running program is called a <strong>process</strong>. A program that a process can be created from is called and <strong>executable</strong>.   In some sense this book is a journey into understanding what exactly these are, how they relate to each other, the operating system and ultimately the hardware.</p>
</section>
</section>
<section id="benefits-to-studying-unix">
<h3><span class="section-number">1.3.5. </span>Benefits to studying UNIX<a class="headerlink" href="#benefits-to-studying-unix" title="Permalink to this headline">#</a></h3>
<p>UNIX’s terminal interface and program development environment became the gold standard for university Computer Science education.  The following are some of the reasons it became so and why it continues to be critical both academically, scientifically and industrially.</p>
<p>The most basic interface it presents, the <a class="reference internal" href="shellintro.html"><span class="doc std std-doc">Shell</span></a>, is a programmer oriented model for interacting with the computer.  Furthermore Unix comes with a large collection of composable and extensible tools for processing ASCII documents that naturally integrate and extend the power of the Shell.  These tools make it easy to write new programs including programs that translate ASCII documents, source code in one language, into source code of another language.</p>
<p>While it takes some effort to learn its strange command line interface, doing so teaches you to think like a programmer.  Where you are encouraged to writing little re-usable programs that you incrementally evolve as needed and combine with others to get big tasks done.  Generally trying to avoid any particular program from getting too complicated.</p>
<p>UNIX also does is not prescriptive on how you should do things.  Rather it provides a large collection of simple building blocks that you can learn to creatively use to meet your needs.  The investment in learning its building blocks and models for composing them minimizes time and effort in going from an idea to a prototype.  UNIX’s programming oriented nature leads to an environment in which almost anything about the OS and user experience can be customized and programmed.  UNIX makes automation the name of the game – largely everything you can do manually can be turned into a program that automates the task.</p>
<p>UNIX has instilled in generations of computer scientists a basic aesthetic for how to design and structure complicated collections of software.  In particular one learns that the designers of UNIX tried to structure the system around a small core set of ideas, “abstractions”, that once understood allows a programmer to understand the rest of the system and how to get things done.   In UNIX this set includes: Files, Processes, I/O redirection, Users and Groups.  All of which we will cover late in this book.</p>
<p>UNIX’s programming friendly nature has lead to the development of a very large and rich body of existing software for UNIX.    With contributions coming from researchers, industry, students and hobbyists  alike.  This body of software has come to be a large scale shared human repository that we rely on heavily.  The computer servers that form the core of the Internet and the Cloud largely run a UNIX variant called Linux.  Many of the computers embedded in the devices that surround us from wifi routers, medical devices, automobiles, and everything else also often run a version of Linux.  But perhaps most critically UNIX, in the form of Linux, is a corner stone of the Open Source software ecosystem.</p>
</section>
</section>
<section id="bottomline">
<h2><span class="section-number">1.4. </span>Bottomline<a class="headerlink" href="#bottomline" title="Permalink to this headline">#</a></h2>
<p>UNIX comes with the kernel and a large collection of existing programs that permit a programmer to write more programs, that they and others can use.   In this book we will focus on what a program really is, how they are constructed and along the way the core tools, skills and ideas that underly all of computing.  Given UNIX’s programmer focus and transparency it is a good choice for us. Furthermore, learning how to be productive in the UNIX environment will teach us a lot about being productive programmers period.</p>
<blockquote>
<div><p><a class="reference internal" href="../_images/fyi.png"><img alt="../_images/fyi.png" class="align-left" src="../_images/fyi.png" style="width: 60px;" /></a> <p style="background-color:powderblue;">
<em>What is LINUX?</em>: Linux or more formally GNU/Linux is an open source variant of the UNIX operating system that is in heavy use today. Every imaginable type of computer runs Linux.  In some sense it has become the computing equivalent of both “The Force” and “Duct Tape”.    It is worth noting that Linux began its life because a University student got interested in Operating Systems and was frustrated with the current “Closed” state of the art.
<a class="reference internal" href="../_images/tux.png"><img alt="../_images/tux.png" class="align-right" src="../_images/tux.png" style="width: 60px;" /></a></p>
</div></blockquote>
</p></section>
</section>

    <script type="text/x-thebe-config">
    {
        requestKernel: true,
        binderOptions: {
            repo: "binder-examples/jupyter-stacks-datascience",
            ref: "master",
        },
        codeMirrorConfig: {
            theme: "abcdef",
            mode: "python"
        },
        kernelOptions: {
            kernelName: "python3",
            path: "./unix"
        },
        predefinedOutput: true
    }
    </script>
    <script>kernelName = 'python3'</script>

              </div>
              
            </main>
            <footer class="footer-article noprint">
                
    <!-- Previous / next buttons -->
<div class='prev-next-area'>
    <a class='left-prev' id="prev-link" href="../howto.html" title="previous page">
        <i class="fas fa-angle-left"></i>
        <div class="prev-next-info">
            <p class="prev-next-subtitle">previous</p>
            <p class="prev-next-title">How to read this book</p>
        </div>
    </a>
    <a class='right-next' id="next-link" href="terminal.html" title="next page">
    <div class="prev-next-info">
        <p class="prev-next-subtitle">next</p>
        <p class="prev-next-title"><span class="section-number">2. </span>What is a Terminal and why do we still use them?</p>
    </div>
    <i class="fas fa-angle-right"></i>
    </a>
</div>
            </footer>
        </div>
    </div>
    <div class="footer-content row">
        <footer class="col footer"><p>
  
    By Jonathan Appavoo<br/>
  
      &copy; Copyright 2021.<br/>
</p>
        </footer>
    </div>
    
</div>


      </div>
    </div>
  
  <!-- Scripts loaded after <body> so the DOM is not blocked -->
  <script src="../_static/scripts/pydata-sphinx-theme.js?digest=1999514e3f237ded88cf"></script>


  </body>
</html>